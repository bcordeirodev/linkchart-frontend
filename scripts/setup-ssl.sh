#!/bin/bash
# üîê Script de configura√ß√£o inicial SSL
# Link Chart - linkcharts.com.br

set -e

# ========================================
# üìã CONFIGURA√á√ïES
# ========================================
DOMAIN="linkcharts.com.br"
EMAIL="bcordeiro.dev@gmail.com"
PROJECT_DIR="/var/www/linkchart-frontend"
LOG_FILE="/var/log/ssl-setup.log"

# ========================================
# üîß FUN√á√ïES AUXILIARES
# ========================================

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S'): $1" | tee -a $LOG_FILE
}

error_exit() {
    log "ERROR: $1"
    exit 1
}

check_requirements() {
    log "Verificando pr√©-requisitos..."
    
    # Verificar se √© root
    if [ "$EUID" -ne 0 ]; then
        error_exit "Este script deve ser executado como root"
    fi
    
    # Verificar se o dom√≠nio est√° acess√≠vel
    if ! curl -s -o /dev/null -w "%{http_code}" http://$DOMAIN | grep -q "200\|301\|302"; then
        log "AVISO: Dom√≠nio $DOMAIN pode n√£o estar acess√≠vel via HTTP"
    fi
    
    # Verificar portas
    if ! ss -tlnp | grep -q ":80 "; then
        error_exit "Porta 80 n√£o est√° aberta ou em uso"
    fi
    
    log "‚úÖ Pr√©-requisitos verificados"
}

install_certbot() {
    log "Instalando Certbot..."
    
    # Atualizar sistema
    apt update
    
    # Instalar Certbot
    apt install -y certbot python3-certbot-nginx
    
    # Verificar instala√ß√£o
    certbot --version || error_exit "Falha na instala√ß√£o do Certbot"
    
    log "‚úÖ Certbot instalado com sucesso"
}

backup_config() {
    log "Criando backup da configura√ß√£o atual..."
    
    backup_dir="/var/backups/ssl-setup-$(date +%Y%m%d-%H%M%S)"
    mkdir -p $backup_dir
    
    if [ -d "$PROJECT_DIR" ]; then
        cp -r $PROJECT_DIR/deploy/ $backup_dir/ 2>/dev/null || log "AVISO: Falha ao fazer backup do deploy"
    fi
    
    if [ -d "/etc/nginx" ]; then
        cp -r /etc/nginx/ $backup_dir/nginx-backup/ 2>/dev/null || log "AVISO: Falha ao fazer backup do nginx"
    fi
    
    log "‚úÖ Backup criado em $backup_dir"
}

stop_containers() {
    log "Parando containers para libera√ß√£o da porta 80..."
    
    cd $PROJECT_DIR
    
    if [ -f "deploy/docker-compose.prod.yml" ]; then
        docker compose -f deploy/docker-compose.prod.yml down || log "AVISO: Falha ao parar containers"
    fi
    
    # Aguardar libera√ß√£o da porta
    sleep 5
    
    log "‚úÖ Containers parados"
}

generate_certificate() {
    log "Gerando certificado SSL para $DOMAIN..."
    
    # Criar diret√≥rio webroot se n√£o existir
    mkdir -p /var/www/html
    
    # Gerar certificado usando webroot
    if certbot certonly \
        --webroot \
        -w /var/www/html \
        -d $DOMAIN \
        -d www.$DOMAIN \
        --email $EMAIL \
        --agree-tos \
        --non-interactive \
        --expand; then
        
        log "‚úÖ Certificado gerado com sucesso"
        
        # Verificar certificado
        if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
            log "‚úÖ Certificado verificado em /etc/letsencrypt/live/$DOMAIN/"
            
            # Mostrar informa√ß√µes do certificado
            openssl x509 -in /etc/letsencrypt/live/$DOMAIN/cert.pem -noout -dates | tee -a $LOG_FILE
        else
            error_exit "Certificado n√£o encontrado ap√≥s gera√ß√£o"
        fi
    else
        error_exit "Falha na gera√ß√£o do certificado"
    fi
}

setup_permissions() {
    log "Configurando permiss√µes SSL..."
    
    # Criar diret√≥rio SSL no projeto
    mkdir -p $PROJECT_DIR/ssl
    
    # Copiar certificados para o projeto (backup)
    if [ -d "/etc/letsencrypt/live/$DOMAIN" ]; then
        cp -L /etc/letsencrypt/live/$DOMAIN/* $PROJECT_DIR/ssl/ 2>/dev/null || log "AVISO: Falha ao copiar certificados"
    fi
    
    # Configurar permiss√µes
    chmod -R 755 /etc/letsencrypt/
    chmod -R 644 /etc/letsencrypt/live/$DOMAIN/
    chmod 600 /etc/letsencrypt/live/$DOMAIN/privkey.pem
    
    log "‚úÖ Permiss√µes configuradas"
}

start_containers() {
    log "Iniciando containers com SSL..."
    
    cd $PROJECT_DIR
    
    if [ -f "deploy/docker-compose.prod.yml" ]; then
        docker compose -f deploy/docker-compose.prod.yml up -d
        
        # Aguardar containers ficarem saud√°veis
        log "Aguardando containers ficarem saud√°veis..."
        sleep 15
        
        # Verificar status
        docker ps | grep linkcharts || log "AVISO: Container pode n√£o estar rodando"
        
        log "‚úÖ Containers iniciados"
    else
        log "AVISO: docker-compose.prod.yml n√£o encontrado"
    fi
}

setup_auto_renewal() {
    log "Configurando renova√ß√£o autom√°tica..."
    
    # Tornar script de renova√ß√£o execut√°vel
    chmod +x $PROJECT_DIR/scripts/renew-ssl.sh
    
    # Adicionar ao crontab se n√£o existir
    if ! crontab -l 2>/dev/null | grep -q "renew-ssl.sh"; then
        (crontab -l 2>/dev/null; echo "0 2 * * * $PROJECT_DIR/scripts/renew-ssl.sh") | crontab -
        log "‚úÖ Cron job adicionado para renova√ß√£o autom√°tica"
    else
        log "‚úÖ Cron job j√° existe"
    fi
    
    # Testar renova√ß√£o (dry-run)
    log "Testando renova√ß√£o autom√°tica (dry-run)..."
    if certbot renew --dry-run; then
        log "‚úÖ Teste de renova√ß√£o bem-sucedido"
    else
        log "‚ö†Ô∏è Falha no teste de renova√ß√£o. Verificar manualmente."
    fi
}

test_ssl() {
    log "Testando configura√ß√£o SSL..."
    
    # Aguardar um pouco para o container estar pronto
    sleep 10
    
    # Testar HTTP (deve redirecionar)
    log "Testando redirecionamento HTTP ‚Üí HTTPS..."
    http_response=$(curl -s -o /dev/null -w "%{http_code}" http://$DOMAIN || echo "000")
    if [ "$http_response" = "301" ] || [ "$http_response" = "302" ]; then
        log "‚úÖ Redirecionamento HTTP funcionando (c√≥digo: $http_response)"
    else
        log "‚ö†Ô∏è Redirecionamento HTTP pode n√£o estar funcionando (c√≥digo: $http_response)"
    fi
    
    # Testar HTTPS
    log "Testando conectividade HTTPS..."
    https_response=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN/health || echo "000")
    if [ "$https_response" = "200" ]; then
        log "‚úÖ HTTPS funcionando corretamente"
    else
        log "‚ö†Ô∏è HTTPS pode n√£o estar funcionando (c√≥digo: $https_response)"
    fi
    
    # Testar certificado SSL
    log "Verificando certificado SSL..."
    if openssl s_client -connect $DOMAIN:443 -servername $DOMAIN </dev/null 2>/dev/null | grep -q "Verify return code: 0"; then
        log "‚úÖ Certificado SSL v√°lido"
    else
        log "‚ö†Ô∏è Certificado SSL pode ter problemas"
    fi
}

# ========================================
# üöÄ PROCESSO PRINCIPAL
# ========================================

log "=== INICIANDO CONFIGURA√á√ÉO SSL PARA $DOMAIN ==="

check_requirements
install_certbot
backup_config
stop_containers
generate_certificate
setup_permissions
start_containers
setup_auto_renewal
test_ssl

log "=== CONFIGURA√á√ÉO SSL CONCLU√çDA ==="
log ""
log "üìã PR√ìXIMOS PASSOS:"
log "1. Verificar se https://$DOMAIN est√° funcionando"
log "2. Testar redirecionamento HTTP ‚Üí HTTPS"
log "3. Verificar certificado em https://www.ssllabs.com/ssltest/"
log "4. Monitorar logs em /var/log/ssl-*.log"
log ""
log "üîß COMANDOS √öTEIS:"
log "- Verificar certificados: sudo certbot certificates"
log "- Testar renova√ß√£o: sudo certbot renew --dry-run"
log "- Ver logs do container: docker logs linkcharts-frontend-prod"
log "- Status do container: docker ps | grep linkcharts"
