name: üöÄ Deploy Frontend to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: linkchartapp-frontend
  NODE_VERSION: '22'

jobs:
  build-and-deploy:
    name: üèóÔ∏è Build and Deploy Frontend
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 30

    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4

    - name: üîê Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üìã Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üì• Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: üß™ Run tests (optional)
      run: npm run lint

    - name: üèóÔ∏è Build application
      run: npm run build:production
      env:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
        NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
        API_BASE_URL: ${{ secrets.API_BASE_URL }}
        AUTH_URL: ${{ secrets.AUTH_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}
        NEXT_PUBLIC_APP_VERSION: ${{ secrets.NEXT_PUBLIC_APP_VERSION }}
        NEXT_PUBLIC_APP_DESCRIPTION: ${{ secrets.NEXT_PUBLIC_APP_DESCRIPTION }}
        NEXT_TELEMETRY_DISABLED: 1
        NEXT_PUBLIC_ENABLE_ANALYTICS: true
        NEXT_PUBLIC_ENABLE_PWA: true

    - name: üê≥ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.production
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        build-args: |
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
          NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
          API_BASE_URL=${{ secrets.API_BASE_URL }}
          AUTH_SECRET=${{ secrets.AUTH_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          AUTH_URL=${{ secrets.AUTH_URL }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          NEXT_PUBLIC_APP_NAME=${{ secrets.NEXT_PUBLIC_APP_NAME }}
          NEXT_PUBLIC_APP_VERSION=${{ secrets.NEXT_PUBLIC_APP_VERSION }}
          NEXT_PUBLIC_APP_DESCRIPTION=${{ secrets.NEXT_PUBLIC_APP_DESCRIPTION }}
          NEXT_TELEMETRY_DISABLED=1
          NEXT_PUBLIC_ENABLE_ANALYTICS=true
          NEXT_PUBLIC_ENABLE_PWA=true

    - name: üöÄ Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: root
        key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
        script: |
          echo "üöÄ Iniciando deploy do frontend..."
          
          # Criar diret√≥rio se n√£o existir
          mkdir -p /var/www/linkchartapp-frontend
          cd /var/www/linkchartapp-frontend
          
          # Parar containers antigos
          echo "üõë Parando containers antigos..."
          docker compose -f docker/docker-compose.production.yml down 2>/dev/null || echo "No containers to stop"
          
          # Pull da nova imagem
          echo "üì• Baixando nova imagem..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/linkchartapp-frontend:latest
          
          # Iniciar servi√ßos
          echo "üöÄ Iniciando servi√ßos..."
          docker compose -f docker/docker-compose.production.yml up -d
          
          # Aguardar inicializa√ß√£o
          echo "‚è≥ Aguardando inicializa√ß√£o..."
          sleep 30
          
          # Verificar se est√° funcionando
          echo "üîç Verificando se est√° funcionando..."
          for i in {1..5}; do
            if curl -f http://localhost:3000/ 2>/dev/null; then
              echo "‚úÖ Aplica√ß√£o funcionando corretamente"
              break
            else
              echo "‚è≥ Tentativa $i/5 - Aguardando..."
              if [ $i -eq 5 ]; then
                echo "‚ùå Aplica√ß√£o n√£o est√° funcionando ap√≥s 5 tentativas"
                docker logs linkchartapp-frontend
                exit 1
              fi
              sleep 10
            fi
          done
          
          # Limpar imagens antigas
          echo "üßπ Limpando imagens antigas..."
          docker image prune -f
          
          echo "‚úÖ Deploy completed successfully!"
