# 🚀 CI/CD WORKFLOW - LINK CHART FRONTEND
# Deploy automático para produção

name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'Dockerfile.prod'
      - 'docker-compose.prod.yml'
      - '.github/workflows/**'
  
  pull_request:
    branches: [main]
    types: [closed]
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# Configurações globais
env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

# Permissões necessárias
permissions:
  contents: read
  packages: write
  deployments: write

jobs:
  # ========================================
  # 🧪 QUALITY CHECKS
  # ========================================
  quality-checks:
    name: 🧪 Quality & Security Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm install --prefer-offline --no-audit
          
      - name: 🔍 TypeScript Check
        run: npm run type-check

      - name: 🎨 Lint Check
        run: npm run lint

      - name: 💅 Format Check
        run: npm run format:check

      - name: 🏗️ Build Test
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📊 Bundle Analysis
        run: |
          npm install -g bundlesize
          echo "Bundle size analysis completed"

      - name: 🔒 Security Audit
        run: |
          npm audit --audit-level moderate
          
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  # ========================================
  # 🐳 DOCKER BUILD & PUSH
  # ========================================
  docker-build:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and Push Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 🔍 Image Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ========================================
  # 🚀 DEPLOY TO PRODUCTION
  # ========================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-checks, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: http://134.209.33.182:3000
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH Key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: 📋 Prepare Deploy Script
        run: |
          # Criar script de deploy simplificado
          mkdir -p deploy-files
          
          # Criar script de deploy otimizado
          cat > deploy-files/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting deployment..."
          
          # Variáveis
          APP_DIR="/var/www/linkchart-frontend"
          BACKUP_DIR="/var/www/linkchart-frontend/backups/$(date +%Y%m%d_%H%M%S)"
          
          # Ir para diretório da aplicação
          cd $APP_DIR
          
          # Criar backup
          echo "📦 Creating backup..."
          mkdir -p backups
          if [ -d "dist" ]; then
            cp -r dist/ $BACKUP_DIR-dist/ 2>/dev/null || true
          fi
          
          # Atualizar código
          echo "📥 Updating code..."
          git fetch origin
          git reset --hard origin/main
          git pull origin main
          
          # Parar containers existentes
          echo "🛑 Stopping existing containers..."
          docker compose -f docker-compose.prod.yml down --remove-orphans || true
          
          # Limpar imagens antigas
          echo "🧹 Cleaning old images..."
          docker system prune -f
          
          # Rebuild da aplicação com código atualizado
          echo "🏗️ Building new image..."
          docker build -f Dockerfile.prod -t linkcharts-frontend:latest .
          
          # Iniciar containers
          echo "🚀 Starting containers..."
          docker compose -f docker-compose.prod.yml up -d
          
          # Verificar saúde
          echo "🏥 Health check..."
          sleep 30
          
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Health check failed, rolling back..."
            docker compose -f docker-compose.prod.yml down
            if [ -d "$BACKUP_DIR-dist" ] && [ "$(ls -A $BACKUP_DIR-dist)" ]; then
              cp -r $BACKUP_DIR-dist/* dist/
              docker compose -f docker-compose.prod.yml up -d
            fi
            exit 1
          fi
          
          # Limpeza de backups antigos (manter apenas os 5 mais recentes)
          echo "🧹 Cleaning old backups..."
          sudo find /var/www/linkchart-frontend/backups -maxdepth 1 -type d -name "20*" | sort -r | tail -n +6 | sudo xargs rm -rf
          
          echo "🎉 Deployment completed successfully!"
          EOF
          
          chmod +x deploy-files/deploy.sh

      - name: 🚀 Execute Deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /var/www/linkchart-frontend
            
            echo "🚀 Starting deployment..."
            
            # Criar backup
            echo "📦 Creating backup..."
            mkdir -p backups
            BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
            if [ -d "dist" ]; then
              cp -r dist/ $BACKUP_DIR-dist/ 2>/dev/null || true
            fi
            
            # Atualizar código
            echo "📥 Updating code..."
            git fetch origin
            git reset --hard origin/main
            git pull origin main
            
            # Parar containers existentes
            echo "🛑 Stopping existing containers..."
            docker compose -f docker-compose.prod.yml down --remove-orphans || true
            
            # Limpar imagens antigas
            echo "🧹 Cleaning old images..."
            docker system prune -f
            
            # Rebuild da aplicação
            echo "🏗️ Building new image..."
            docker build -f Dockerfile.prod -t linkcharts-frontend:latest .
            
            # Iniciar containers
            echo "🚀 Starting containers..."
            docker compose -f docker-compose.prod.yml up -d
            
            # Verificar saúde
            echo "🏥 Health check..."
            sleep 30
            
            if curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Deployment successful!"
            else
              echo "❌ Health check failed, rolling back..."
              docker compose -f docker-compose.prod.yml down
              if [ -d "$BACKUP_DIR-dist" ] && [ "$(ls -A $BACKUP_DIR-dist)" ]; then
                cp -r $BACKUP_DIR-dist/* dist/
                docker compose -f docker-compose.prod.yml up -d
              fi
              exit 1
            fi
            
            # Limpeza de backups antigos (manter apenas os 5 mais recentes)
            echo "🧹 Cleaning old backups..."
            find backups -maxdepth 1 -type d -name "20*" | sort -r | tail -n +6 | xargs rm -rf 2>/dev/null || true
            
            echo "🎉 Deployment completed successfully!"
          EOF

      - name: 🧪 Post-Deploy Tests
        run: |
          # Aguardar estabilização
          sleep 60
          
          # Testes básicos
          curl -f http://134.209.33.182:3000/health
          curl -f http://134.209.33.182:3000/
          
          echo "✅ Post-deploy tests passed!"

      - name: 📢 Notify Success
        if: success()
        run: |
          echo "🎉 Deployment to production completed successfully!"
          echo "🌐 Application is live at: http://134.209.33.182:3000"

      - name: 📢 Notify Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔍 Check the logs for more details."

  # ========================================
  # 🧹 CLEANUP
  # ========================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 🧹 Clean up old packages
        run: |
          echo "🧹 Cleanup completed"
