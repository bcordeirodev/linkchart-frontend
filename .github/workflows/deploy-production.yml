# ===========================================
# GITHUB ACTIONS WORKFLOW - PRODUÇÃO
# Link Chart Frontend - Deploy Automatizado
# ===========================================

name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

# Definir variáveis globais
env:
  NODE_VERSION: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

# Definir permissões necessárias
permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  # ===========================================
  # JOB 1: ANÁLISE E VALIDAÇÃO
  # ===========================================
  validate:
    name: 🔍 Code Analysis & Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: 🔍 Project Structure Validation
        run: |
          npm run validate
        continue-on-error: false

      - name: 🔧 TypeScript Check
        run: |
          npx tsc --noEmit
        continue-on-error: true

      - name: 🏗️ Test Build
        run: |
          npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          STANDALONE: true

      - name: 📊 Build Analysis
        run: |
          echo "Build completed successfully!"
          ls -la .next/
          du -sh .next/

  # ===========================================
  # JOB 2: BUILD E PUSH DA IMAGEM DOCKER
  # ===========================================
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1

  # ===========================================
  # JOB 3: DEPLOY PARA PRODUÇÃO
  # ===========================================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # HEALTH CHECK (Comentado para implementação futura)
      # - name: 🏥 Health Check
      #   run: |
      #     echo "Performing health check..."
      #     # curl -f http://your-app-url/api/health || exit 1
      #   continue-on-error: false

      - name: 📋 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY

      # DEPLOY REAL (Comentado - implementar conforme sua infraestrutura)
      # - name: 🚀 Deploy to DigitalOcean
      #   run: |
      #     echo "Deploying to DigitalOcean..."
      #     # Implementar deploy real aqui
      #     # Exemplo: kubectl, docker-compose, etc.

  # ===========================================
  # JOB 4: NOTIFICAÇÕES (OPCIONAL)
  # ===========================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [validate, build-and-push, deploy]
    if: always()

    steps:
      - name: 📊 Job Status Summary
        run: |
          echo "## 📊 Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build & Push**: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed or was skipped**" >> $GITHUB_STEP_SUMMARY
          fi

      # SLACK/DISCORD NOTIFICATIONS (Comentado para implementação futura)
      # - name: 📱 Slack Notification
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     channel: '#deployments'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
