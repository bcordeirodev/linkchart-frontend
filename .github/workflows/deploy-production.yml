# üöÄ CI/CD WORKFLOW - LINK CHART FRONTEND
# Deploy autom√°tico para produ√ß√£o

name: üöÄ Deploy to Production

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'Dockerfile.prod'
      - 'docker-compose.prod.yml'
      - '.github/workflows/**'
  
  pull_request:
    branches: [main]
    types: [closed]
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# Configura√ß√µes globais
env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

# Permiss√µes necess√°rias
permissions:
  contents: read
  packages: write
  deployments: write

jobs:
  # ========================================
  # üß™ QUALITY CHECKS
  # ========================================
  quality-checks:
    name: üß™ Quality & Security Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: |
          npm install --prefer-offline --no-audit
          
      - name: üîç TypeScript Check
        run: npm run type-check

      - name: üé® Lint Check
        run: npm run lint

      - name: üíÖ Format Check
        run: npm run format:check

      - name: üèóÔ∏è Build Test
        run: npm run build
        env:
          NODE_ENV: production

      - name: üìä Bundle Analysis
        run: |
          npm install -g bundlesize
          echo "Bundle size analysis completed"

      - name: üîí Security Audit
        run: |
          npm audit --audit-level moderate
          
      - name: üì§ Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  # ========================================
  # üê≥ DOCKER BUILD & PUSH
  # ========================================
  docker-build:
    name: üê≥ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è Build and Push Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: üîç Image Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üì§ Upload Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ========================================
  # üöÄ DEPLOY TO PRODUCTION
  # ========================================
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-checks, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://linkcharts.com
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîê Setup SSH Key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: üìã Prepare Deploy Files
        run: |
          # Criar diret√≥rio tempor√°rio para deploy
          mkdir -p deploy-files
          
          # Copiar arquivos necess√°rios
          cp docker-compose.prod.yml deploy-files/
          cp -r docker/ deploy-files/
          
          # Criar script de deploy
          cat > deploy-files/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "üöÄ Starting deployment..."
          
          # Vari√°veis
          APP_DIR="/opt/linkcharts/frontend"
          BACKUP_DIR="/opt/linkcharts/backups/$(date +%Y%m%d_%H%M%S)"
          
          # Criar backup
          echo "üì¶ Creating backup..."
          sudo mkdir -p $BACKUP_DIR
          if [ -d "$APP_DIR" ]; then
            sudo cp -r $APP_DIR/* $BACKUP_DIR/ 2>/dev/null || true
          fi
          
          # Criar diret√≥rio da aplica√ß√£o
          sudo mkdir -p $APP_DIR
          sudo mkdir -p $APP_DIR/logs/nginx
          sudo mkdir -p $APP_DIR/ssl
          
          # Copiar arquivos
          echo "üìÅ Copying files..."
          sudo cp -r * $APP_DIR/
          
          # Definir permiss√µes
          sudo chown -R $USER:$USER $APP_DIR
          sudo chmod +x $APP_DIR/deploy.sh
          
          # Parar containers existentes
          echo "üõë Stopping existing containers..."
          cd $APP_DIR
          sudo docker-compose -f docker-compose.prod.yml down --remove-orphans || true
          
          # Limpar imagens antigas
          echo "üßπ Cleaning old images..."
          sudo docker system prune -f
          
          # Fazer pull da nova imagem
          echo "üì• Pulling new image..."
          sudo docker-compose -f docker-compose.prod.yml pull
          
          # Iniciar containers
          echo "üöÄ Starting containers..."
          sudo docker-compose -f docker-compose.prod.yml up -d
          
          # Verificar sa√∫de
          echo "üè• Health check..."
          sleep 30
          
          if curl -f http://localhost/health > /dev/null 2>&1; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Health check failed, rolling back..."
            sudo docker-compose -f docker-compose.prod.yml down
            if [ -d "$BACKUP_DIR" ] && [ "$(ls -A $BACKUP_DIR)" ]; then
              sudo cp -r $BACKUP_DIR/* $APP_DIR/
              sudo docker-compose -f docker-compose.prod.yml up -d
            fi
            exit 1
          fi
          
          # Limpeza de backups antigos (manter apenas os 5 mais recentes)
          echo "üßπ Cleaning old backups..."
          sudo find /opt/linkcharts/backups -maxdepth 1 -type d -name "20*" | sort -r | tail -n +6 | sudo xargs rm -rf
          
          echo "üéâ Deployment completed successfully!"
          EOF
          
          chmod +x deploy-files/deploy.sh

      - name: üì§ Upload to Server
        run: |
          # Fazer upload dos arquivos
          scp -o StrictHostKeyChecking=no -r deploy-files/* ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/tmp/linkcharts-deploy/
          
      - name: üöÄ Execute Deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /tmp/linkcharts-deploy
            chmod +x deploy.sh
            ./deploy.sh
            
            # Limpeza
            rm -rf /tmp/linkcharts-deploy
          EOF

      - name: üß™ Post-Deploy Tests
        run: |
          # Aguardar estabiliza√ß√£o
          sleep 60
          
          # Testes b√°sicos
          curl -f https://linkcharts.com/health
          curl -f https://linkcharts.com/
          
          echo "‚úÖ Post-deploy tests passed!"

      - name: üì¢ Notify Success
        if: success()
        run: |
          echo "üéâ Deployment to production completed successfully!"
          echo "üåê Application is live at: https://linkcharts.com"

      - name: üì¢ Notify Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "üîç Check the logs for more details."

  # ========================================
  # üßπ CLEANUP
  # ========================================
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: üßπ Clean up old packages
        run: |
          echo "üßπ Cleanup completed"
