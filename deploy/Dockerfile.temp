# üê≥ DOCKERFILE TEMPOR√ÅRIO - HTTP APENAS
# Para gera√ß√£o de certificado SSL

# ========================================
# üèóÔ∏è STAGE 1: BUILD
# ========================================
FROM node:20-alpine AS builder

# Definir diret√≥rio de trabalho
WORKDIR /app

# Instalar depend√™ncias do sistema
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++

# Copiar arquivos de depend√™ncias
COPY package*.json ./
COPY yarn.lock ./

# Instalar depend√™ncias
RUN yarn install --frozen-lockfile --production=false

# Copiar c√≥digo fonte
COPY . .

# Build da aplica√ß√£o
RUN yarn build

# ========================================
# üöÄ STAGE 2: PRODUCTION
# ========================================
FROM nginx:1.25-alpine

# Metadata
LABEL maintainer="bcordeiro.dev@gmail.com"
LABEL description="Link Chart Frontend - Temporary HTTP Only"
LABEL version="1.0.0"

# Instalar depend√™ncias necess√°rias
RUN apk add --no-cache \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# Configurar timezone
ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Copiar build da aplica√ß√£o
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar configura√ß√£o tempor√°ria do Nginx
COPY deploy/docker/nginx/nginx.prod.conf /etc/nginx/nginx.conf
COPY deploy/docker/nginx/default.temp.conf /etc/nginx/conf.d/default.conf

# Criar diret√≥rios necess√°rios
RUN mkdir -p /var/log/nginx \
    && mkdir -p /var/cache/nginx \
    && mkdir -p /tmp/nginx

# Configurar permiss√µes
RUN chown -R nginx:nginx /usr/share/nginx/html \
    && chown -R nginx:nginx /var/log/nginx \
    && chown -R nginx:nginx /var/cache/nginx \
    && chown -R nginx:nginx /tmp/nginx \
    && chmod -R 755 /usr/share/nginx/html

# Expor porta
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Comando de inicializa√ß√£o
CMD ["nginx", "-g", "daemon off;"]
