# üê≥ DOCKERFILE PARA PRODU√á√ÉO - LINK CHART FRONTEND
# Multi-stage build para otimiza√ß√£o de tamanho e performance

# ========================================
# üèóÔ∏è STAGE 1: BUILD
# ========================================
FROM node:20-alpine AS builder

# Metadados
LABEL maintainer="Link Chart Team"
LABEL description="Link Chart Frontend - Production Build"
LABEL version="1.0.0"

# Definir diret√≥rio de trabalho
WORKDIR /app

# Instalar depend√™ncias do sistema necess√°rias
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Copiar arquivos de depend√™ncias
COPY package*.json ./
COPY tsconfig*.json ./
COPY vite.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY eslint.config.mjs ./

# Instalar depend√™ncias (incluindo devDependencies para build)
RUN npm install --silent

# Copiar c√≥digo fonte
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./
COPY aliases.js ./

# Copiar arquivo de ambiente de produ√ß√£o
COPY .env.production ./.env.production

# Limpar cache do Vite antes do build
RUN rm -rf node_modules/.vite dist .vite 2>/dev/null || true

# Build da aplica√ß√£o para produ√ß√£o (sem cache)
RUN npm run build -- --force
 
# ========================================
# üöÄ STAGE 2: PRODUCTION
# ========================================
FROM nginx:1.25-alpine AS production

# Metadados
LABEL maintainer="Link Chart Team"
LABEL description="Link Chart Frontend - Production Server"
LABEL version="1.0.0"

# Instalar depend√™ncias necess√°rias
RUN apk add --no-cache \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# Configurar timezone
ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Remover configura√ß√£o padr√£o do Nginx
RUN rm -rf /usr/share/nginx/html/* \
    && rm /etc/nginx/conf.d/default.conf

# Copiar build da aplica√ß√£o
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar configura√ß√£o customizada do Nginx
COPY docker/nginx/nginx.prod.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.prod.conf /etc/nginx/conf.d/default.conf

# Criar diret√≥rios necess√°rios
RUN mkdir -p /var/log/nginx \
    && mkdir -p /var/cache/nginx \
    && mkdir -p /tmp/nginx

# Configurar permiss√µes
RUN chown -R nginx:nginx /usr/share/nginx/html \
    && chown -R nginx:nginx /var/log/nginx \
    && chown -R nginx:nginx /var/cache/nginx \
    && chown -R nginx:nginx /tmp/nginx \
    && chmod -R 755 /usr/share/nginx/html

# Criar usu√°rio n√£o-root para seguran√ßa
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001

# Expor porta
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Comando de inicializa√ß√£o
CMD ["nginx", "-g", "daemon off;"]
