/**
 * üé® APP ICON COMPONENT
 * Componente centralizado para √≠cones da aplica√ß√£o
 */

import { forwardRef } from 'react';
import { LucideProps } from 'lucide-react';
import { AppIcons, IconCategory, IconName, AnyIconName, FlatAppIcons, IconIntents, IconIntent } from './AppIcons';

// ========================================
// üéØ COMPONENT PROPS
// ========================================

interface AppIconProps extends Omit<LucideProps, 'ref'> {
    /** Nome do √≠cone usando categoria.nome */
    name?: AnyIconName;
    /** Intent sem√¢ntico (mais f√°cil de usar) */
    intent?: IconIntent;
    /** Categoria + nome separados */
    category?: IconCategory;
    iconName?: string;
}

// ========================================
// üß© APP ICON COMPONENT
// ========================================

/**
 * Componente de √≠cone centralizado da aplica√ß√£o
 * Suporta tanto nomes categorizados quanto intents sem√¢nticos
 * 
 * @example
 * ```tsx
 * // Por intent (recomendado)
 * <AppIcon intent="save" size={20} />
 * <AppIcon intent="edit" color="blue" />
 * 
 * // Por categoria.nome
 * <AppIcon name="actions.save" size={24} />
 * <AppIcon name="navigation.back" />
 * 
 * // Por categoria + nome separados
 * <AppIcon category="actions" iconName="delete" />
 * ```
 */
export const AppIcon = forwardRef<SVGSVGElement, AppIconProps>(({
    name,
    intent,
    category,
    iconName,
    size = 20,
    color = 'currentColor',
    ...props
}, ref) => {
    // Determinar qual √≠cone usar baseado nas props
    let IconComponent;

    if (intent) {
        // Usar intent sem√¢ntico (mais f√°cil)
        IconComponent = IconIntents[intent];
    } else if (name) {
        // Usar nome completo categoria.nome
        IconComponent = FlatAppIcons[name];
    } else if (category && iconName) {
        // Usar categoria + nome separados
        const categoryIcons = AppIcons[category] as any;
        IconComponent = categoryIcons?.[iconName];
    }

    // Fallback se √≠cone n√£o encontrado
    if (!IconComponent) {
        console.warn(`AppIcon: √çcone n√£o encontrado`, { name, intent, category, iconName });
        IconComponent = AppIcons.status.error; // √çcone de erro como fallback
    }

    return (
        <IconComponent
            ref={ref}
            size={size}
            color={color}
            {...props}
        />
    );
});

AppIcon.displayName = 'AppIcon';

// ========================================
// üéØ SPECIALIZED ICON COMPONENTS
// ========================================

/**
 * √çcone de a√ß√£o - otimizado para bot√µes de a√ß√£o
 */
export const ActionIcon = forwardRef<SVGSVGElement, { intent: IconIntent } & Omit<LucideProps, 'ref'>>(({
    intent,
    size = 18,
    ...props
}, ref) => {
    const IconComponent = IconIntents[intent];
    return <IconComponent ref={ref} size={size} {...props} />;
});

ActionIcon.displayName = 'ActionIcon';

/**
 * √çcone de navega√ß√£o - otimizado para elementos de navega√ß√£o
 */
export const NavIcon = forwardRef<SVGSVGElement, { intent: IconIntent } & Omit<LucideProps, 'ref'>>(({
    intent,
    size = 20,
    ...props
}, ref) => {
    const IconComponent = IconIntents[intent];
    return <IconComponent ref={ref} size={size} {...props} />;
});

NavIcon.displayName = 'NavIcon';

/**
 * √çcone de status - otimizado para indicadores de status
 */
export const StatusIcon = forwardRef<SVGSVGElement, { intent: IconIntent } & Omit<LucideProps, 'ref'>>(({
    intent,
    size = 16,
    ...props
}, ref) => {
    const IconComponent = IconIntents[intent];
    return <IconComponent ref={ref} size={size} {...props} />;
});

StatusIcon.displayName = 'StatusIcon';

export default AppIcon;
