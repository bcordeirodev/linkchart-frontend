import { Box, Grid } from '@mui/material';
import { useTemporalData } from '../../hooks/useTemporalData';
import { TemporalChart } from './TemporalChart';
import TabDescription from '@/shared/ui/base/TabDescription';
import AnalyticsStateManager from '@/shared/ui/base/AnalyticsStateManager';
import { MetricCardOptimized as MetricCard } from '@/shared/ui/base/MetricCardOptimized';
import { Schedule, TrendingUp, AccessTime, CalendarToday } from '@mui/icons-material';

interface TemporalAnalysisProps {
	linkId?: string;
	globalMode?: boolean;
	title?: string;
	enableRealtime?: boolean;
	timeRange?: '24h' | '7d' | '30d' | '90d';
}

/**
 * ‚è∞ AN√ÅLISE TEMPORAL OTIMIZADA
 *
 * @description
 * Componente integrado para an√°lise de padr√µes temporais dos cliques.
 * Refatorado para seguir padr√µes do projeto e usar AnalyticsStateManager.
 *
 * @features
 * - An√°lise de cliques por hora e dia da semana
 * - M√©tricas de picos e tend√™ncias
 * - Interface consistente com outros m√≥dulos
 * - Dados reais do backend
 * - Dados avan√ßados carregados automaticamente (quando dispon√≠veis)
 * - Tabs avan√ßadas aparecem automaticamente se houver dados suficientes
 */
export function TemporalAnalysis({
	linkId,
	globalMode = false,
	title = 'An√°lise Temporal',
	enableRealtime = false,
	timeRange = '7d'
}: TemporalAnalysisProps) {
	// Usar hook espec√≠fico para dados temporais - SEMPRE incluir dados avan√ßados
	const { data, stats, loading, error, refresh, isRealtime } = useTemporalData({
		linkId,
		globalMode,
		enableRealtime,
		includeAdvanced: true, // ‚úÖ Sempre buscar dados avan√ßados
		timeRange,
		refreshInterval: 30000
	});

	return (
		<Box>
			{/* 1. BOX DE APRESENTA√á√ÉO DO M√ìDULO - SEMPRE VIS√çVEL */}
			<Box sx={{ mb: 3 }}>
				<TabDescription
					icon="‚è∞"
					title={title}
					description="An√°lise de padr√µes temporais dos seus cliques com identifica√ß√£o de picos e tend√™ncias."
					highlight={`Pico: ${stats?.peakHour || '--'}h - ${stats?.peakDay || 'N/A'}`}
					metadata={isRealtime ? 'Tempo Real' : timeRange}
				/>
			</Box>

			{/* 2. CONTE√öDO COM LOADER */}
			<AnalyticsStateManager
				loading={loading}
				error={error}
				hasData={!!data}
				onRetry={refresh}
				loadingMessage="Analisando padr√µes temporais..."
				emptyMessage={
					globalMode
						? 'N√£o h√° dados temporais dispon√≠veis para seus links ativos.'
						: 'Este link ainda n√£o possui dados temporais suficientes para an√°lise.'
				}
				minHeight={300}
			>
				<Box>
					{/* M√âTRICAS */}
					<Box sx={{ mb: 3 }}>
						<Grid
							container
							spacing={3}
						>
							<Grid
								item
								xs={12}
								sm={6}
								md={3}
							>
								<MetricCard
									title="Pico de Hora"
									value={`${stats?.peakHour}h`}
									icon={<AccessTime />}
									color="primary"
									subtitle="maior atividade"
								/>
							</Grid>
							<Grid
								item
								xs={12}
								sm={6}
								md={3}
							>
								<MetricCard
									title="Pico de Dia"
									value={stats?.peakDay || 'N/A'}
									icon={<CalendarToday />}
									color="secondary"
									subtitle="dia mais ativo"
								/>
							</Grid>
							<Grid
								item
								xs={12}
								sm={6}
								md={3}
							>
								<MetricCard
									title="M√©dia/Hora"
									value={stats?.averageHourlyClicks?.toString() || '0'}
									icon={<Schedule />}
									color="info"
									subtitle="cliques por hora"
								/>
							</Grid>
							<Grid
								item
								xs={12}
								sm={6}
								md={3}
							>
								<MetricCard
									title="Tend√™ncia"
									value={
										stats?.trendDirection === 'up'
											? 'üìà Crescendo'
											: stats?.trendDirection === 'down'
												? 'üìâ Declinando'
												: 'üìä Est√°vel'
									}
									icon={<TrendingUp />}
									color={
										stats?.trendDirection === 'up'
											? 'success'
											: stats?.trendDirection === 'down'
												? 'error'
												: 'warning'
									}
									subtitle="dire√ß√£o atual"
								/>
							</Grid>
						</Grid>
					</Box>

					{/* RESTANTE DO CONTE√öDO */}
					<Grid
						container
						spacing={3}
					>
						<Grid
							item
							xs={12}
						>
							<TemporalChart
								hourlyData={data?.clicks_by_hour || []}
								weeklyData={data?.clicks_by_day_of_week || []}
								// NEW: Pass enhanced temporal data
								hourlyPatternsLocal={(data as any)?.hourly_patterns_local}
								weekendVsWeekday={(data as any)?.weekend_vs_weekday}
								businessHoursAnalysis={(data as any)?.business_hours_analysis}
							/>
						</Grid>
					</Grid>
				</Box>
			</AnalyticsStateManager>
		</Box>
	);
}

export default TemporalAnalysis;
